
1. REDUCERS
===========
Function that:
    receive actions
    returns a piece of the application state.


2. COMPONENTS, CONTAINERS
=========================
Components: are dumb, they deal with presentation, no direct connection to the Redux state.
Containers: components with a direct connection to the Redux state. Containers can have state management and also presentation.

If two components needs to deal with the same state, then the common parent component would be a container.


3. ACTIONS, ACTION CREATORS
===========================
Stuff in React happens thanks to events like a click or a call finishing to load.
Events are formally encoded into ACTIONS.
An ACTION is just an object like::
{
    type: BOOK_SELECTED,  // The type identifies the action.
    book: {title: "JS"}  // The payload defines how the state should change.
}

Actions are generated by ACTION CREATORS: functions that are bond to some events.
function selectBook(book) {
    console.log('Book selected: ' + book.title);
}


4. FLOW
=======
An event happen, like a click or a call finishing to load, then:
    ACTION CREATOR: bound to that event >
    ACTION >
    REDUCERS: actions are delivered to all reducers, each return a new piece of state >
    ROOT REDUCER combineReducers: assemble the pieces of state into >
    GLOBAL STATE >
    COMPONENT mapStateToProps: changes the props of a component >
    COMPONENT render
